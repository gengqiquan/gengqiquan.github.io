<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>gengqiquan的博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.gengqiquan.com/"/>
  <updated>2017-07-12T09:49:46.000Z</updated>
  <id>http://www.gengqiquan.com/</id>
  
  <author>
    <name>gengqiquan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LoginUtil一句代码实现各种登录验证前置操作</title>
    <link href="http://www.gengqiquan.com/2017/07/12/LoginUtil%E4%B8%80%E5%8F%A5%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%90%84%E7%A7%8D%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81%E5%89%8D%E7%BD%AE%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.gengqiquan.com/2017/07/12/LoginUtil一句代码实现各种登录验证前置操作/</id>
    <published>2017-07-12T09:47:42.000Z</published>
    <updated>2017-07-12T09:49:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>尊重他人的劳动成果，转载请标明出处：<a href="http://blog.csdn.net/gengqiquan/article/details/53782194，" target="_blank" rel="external">http://blog.csdn.net/gengqiquan/article/details/53782194，</a> 本文出自:【gengqiquan的博客】</p>
<h1 id="一句代码进行登录验证前置操作"><a href="#一句代码进行登录验证前置操作" class="headerlink" title="一句代码进行登录验证前置操作"></a>一句代码进行登录验证前置操作</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LoginUtil.doActionNeedLogin(<span class="keyword">this</span>, () -&gt; &#123;</div><div class="line">       <span class="comment">//do something need login</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><h3 id="doActionNeedLogin"><a href="#doActionNeedLogin" class="headerlink" title="doActionNeedLogin"></a>doActionNeedLogin</h3><p>检查是否登录<br>登录直接执行操作，未登录跳转登录，登录后继续执行操作，放弃登录则什么都不做</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LoginUtil.doActionNeedLogin(<span class="keyword">this</span>, () -&gt; &#123;</div><div class="line">       <span class="comment">//do something need login</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h3 id="doActionJustAfterLogin"><a href="#doActionJustAfterLogin" class="headerlink" title="doActionJustAfterLogin"></a>doActionJustAfterLogin</h3><p>检查是否登录<br>已登录什么都不做<br>未登录跳转登录，登录后继续执行操作，放弃登录则什么都不做</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LoginUtil.doActionJustAfterLogin(<span class="keyword">this</span>, () -&gt; &#123;</div><div class="line">       <span class="comment">//do something need login</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h3 id="doActionAlreadyLogin"><a href="#doActionAlreadyLogin" class="headerlink" title="doActionAlreadyLogin"></a>doActionAlreadyLogin</h3><p>需要登录才能执行的操作<br>登录直接执行操作，未登录跳转登录，登录后什么都不做</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">LoginUtil.doActionAlreadyLogin(<span class="keyword">this</span>, () -&gt; &#123;</div><div class="line">       <span class="comment">//do something need login</span></div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<h3 id="doLogin"><a href="#doLogin" class="headerlink" title="doLogin"></a>doLogin</h3><p>跳转登录，什么都不做</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoginUtil.doLogin(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<h3 id="isLogin"><a href="#isLogin" class="headerlink" title="isLogin"></a>isLogin</h3><p>判断是否登录，已登录返回true</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoginUtil.isLogin();</div></pre></td></tr></table></figure>
<h2 id="初始化默认配置"><a href="#初始化默认配置" class="headerlink" title="初始化默认配置"></a>初始化默认配置</h2><h3 id="设置登录activity"><a href="#设置登录activity" class="headerlink" title="设置登录activity"></a>设置登录activity</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoginUtil.setLoginActivity(LoginActivity.class);</div></pre></td></tr></table></figure>
<h3 id="添加自定义是否登录判断拦截器"><a href="#添加自定义是否登录判断拦截器" class="headerlink" title="添加自定义是否登录判断拦截器"></a>添加自定义是否登录判断拦截器</h3><p>在应用入口调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!Util.checkNULL(LoginUtil.USER_POHONE)) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div><div class="line">     LoginUtil.USER_POHONE = SharedUtil.getString(context, <span class="string">"username"</span>);</div><div class="line">     <span class="keyword">if</span> (!Util.checkNULL(LoginUtil.USER_POHONE)) &#123;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">     &#125;</div></pre></td></tr></table></figure>
<h2 id="登录配置"><a href="#登录配置" class="headerlink" title="登录配置"></a>登录配置</h2><p>在loginAtivity登录成功后和在应用启动时从本地缓存中取出登录凭证赋值给 LoginUtil.USER_TOKEN</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LoginUtil.USER_TOKEN = token;</div></pre></td></tr></table></figure>
<p>token为登录凭证，如果你自定义了登录拦截器，记得为你的判断变量赋值</p>
<p>在loginAtivity的onfinish()方法中调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (LoginUtil.CALLBACK != <span class="keyword">null</span>)</div><div class="line">          LoginUtil.CALLBACK.postExec();</div></pre></td></tr></table></figure>
<h2 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h2><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">  &lt;groupId&gt;com.gengqiquan.login-util&lt;/groupId&gt;</div><div class="line">  &lt;artifactId&gt;library&lt;/artifactId&gt;</div><div class="line">  &lt;version&gt;1.0.1&lt;/version&gt;</div><div class="line">  &lt;type&gt;pom&lt;/type&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="gralde"><a href="#gralde" class="headerlink" title="gralde"></a>gralde</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.gengqiquan.login-util:app:1.0.1&apos;</div></pre></td></tr></table></figure>
<h2 id="lvy"><a href="#lvy" class="headerlink" title="lvy"></a>lvy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;dependency org=&apos;com.gengqiquan.login-util&apos; name=&apos;app&apos; rev=&apos;1.0.1&apos;&gt;</div><div class="line">  &lt;artifact name=&apos;app&apos; ext=&apos;pom&apos; &gt;&lt;/artifact&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p>完整的示例项目地址<a href="https://github.com/gengqiquan/LoginUtil" target="_blank" rel="external">https://github.com/gengqiquan/LoginUtil</a></p>
<p>请多多star</p>
<p>有什么建议的可以留言喔</p>
<p>如果我的博客对您有帮助，请留言鼓励下或者点个赞吧！</p>
<p>我建了一个QQ群（群号：121606151），用于大家讨论交流Android技术问题，有兴趣的可以加下，大家一起进步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尊重他人的劳动成果，转载请标明出处：&lt;a href=&quot;http://blog.csdn.net/gengqiquan/article/details/53782194，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/gengqiquan/article/details/53782194，&lt;/a&gt; 本文出自:【gengqiquan的博客】&lt;/p&gt;
&lt;h1 id=&quot;一句代码进行登录验证前置操作&quot;&gt;&lt;a href=&quot;#一句代码进行登录验证前置操作&quot; class=&quot;headerlink&quot; title=&quot;一句代码进行登录验证前置操作&quot;&gt;&lt;/a&gt;一句代码进行登录验证前置操作&lt;/h1&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;LoginUtil.doActionNeedLogin(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, () -&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &lt;span class=&quot;comment&quot;&gt;//do something need login&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Support Annotations注解介绍以及自定义注解代替枚举</title>
    <link href="http://www.gengqiquan.com/2017/07/12/Support-Annotations%E6%B3%A8%E8%A7%A3%E4%BB%8B%E7%BB%8D%E4%BB%A5%E5%8F%8A%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E4%BB%A3%E6%9B%BF%E6%9E%9A%E4%B8%BE/"/>
    <id>http://www.gengqiquan.com/2017/07/12/Support-Annotations注解介绍以及自定义注解代替枚举/</id>
    <published>2017-07-12T09:46:33.000Z</published>
    <updated>2017-07-12T09:50:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>尊重他人的劳动成果，转载请标明出处：<a href="http://blog.csdn.net/gengqiquan/article/details/70185731，" target="_blank" rel="external">http://blog.csdn.net/gengqiquan/article/details/70185731，</a> 本文出自:【gengqiquan的博客】</p>
<p>上篇博客嘀咕了注解的基本知识。这篇和大家唠唠Android提供的一些编译限制注解以及怎么自定义贴合自己项目框架的限制注解</p>
<p>Android支持Java默认的那些注解，同时通过一些依赖库也额外提供了很多注解，了解并熟练使用这些注解能够让你的代码更加严谨，结构更加清晰、架构更易维护</p>
<a id="more"></a>
<p>  Android support library从19.1版本开始引入了一个新的注解库Support Annotations<br>support appcompa-v7里面默认包含了这个库，如果你没有使用的话也可以通过添加单独依赖的方式引入<br>在model的build.gradle中添加如下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">    compile &apos;com.android.support:support-annotations:25.2.0&apos;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>选取的25.2.0版本的，包含了如下几种类型的注解</p>
<ul>
<li><p>资源引用限制类：用于限制参数必须为对应的资源类型</p>
<p>AnimRes AnyRes ArrayRes AttrRes BoolRes ColorRes DimenRes DrawableRes FractionRes IdRes IntegerRes InterpolatorRes LayoutRes MenuRes PluralsRes Px RawRes StringRes StyleableRes StyleRes TransitionRes XmlRes</p>
</li>
<li><p>线程执行限制类：用于限制方法或者类必须在指定的线程执行</p>
<p>AnyThread BinderThread MainThread UiThread WorkerThread </p>
</li>
<li><p>参数为空性限制类：用于限制参数是否可以为空</p>
<p>NonNull Nullable </p>
</li>
<li><p>类型范围限制类：用于限制标注值的值范围</p>
<p>FloatRang IntRange</p>
</li>
<li><p>类型定义类：用于限制定义的注解的取值集合</p>
<p>IntDef StringDef</p>
</li>
<li><p>其他的功能性注解：</p>
<p>CallSuper CheckResult ColorInt Dimension Keep Px RequiresApi RequiresPermission RestrictTo Size VisibleForTesting</p>
</li>
</ul>
<p>下面分别举例怎么使用</p>
<h3 id="资源引用限制类"><a href="#资源引用限制类" class="headerlink" title="资源引用限制类"></a>资源引用限制类</h3><p>用于当我们期望的输入为所注解对应的类型时，可以加上对应的资源类型注解。这样如果输入了非预期类型的资源ID就编译器就会报错，比如我们在写项目框架时定义了一个设置主布局的抽象方法，需要子类继承该类是实现这个方法，返回一个layout布局ID，一般我们会这么写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public abstract int getLayoutID();</div></pre></td></tr></table></figure>
<p>这样这是限制了返回的数据类型必须为int。如果实现该类的人穿了一个drawable的ID或者一个int数值，也是可以正常编译的。要等到运行到该界面时才会报错。这个时候我们就可以用Support Annotations包提供的注解来标注该方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">@LayoutRes</div><div class="line">public abstract int getLayoutID();</div></pre></td></tr></table></figure>
<p>这样当实现该类的人传入一个非layout的ID时编译器就会报except resource of type layout异常 而导致无法编译 。</p>
<h3 id="线程执行限制类"><a href="#线程执行限制类" class="headerlink" title="线程执行限制类"></a>线程执行限制类</h3><p>在我们编码的时候，合理的抽取代码为独立的方法是一个很好的习惯，不仅有利于代码的阅读以及相同逻辑的多处调用，也方便后期的重构，同时抽取代码的时候能够让你思考这块逻辑实现是否合理是否过于臃肿。但抽取出来的方法我们有可能放在编写的activity里也可能放在公共类或者变成静态方法，这个时候你不能保证知道调用者会在哪里使用你这段代码。</p>
<p>除非他花时间去仔细阅读你的代码，否则他也不会知道他调用的方法里调用了多少方法，比如方法里包含了一些io操作的代码，或者方法执行特别耗时应该在子线程调用。或者方法里面操作了UI必须在主线程调用。这个时候就可以用线程执行限制类注解在你的方法上，当个调用者并没有再你期望的线程中调用这个方法时编译器就会报错。</p>
<p>需要注意的是这些注解的作用域是类和方法。标注与某个类时表明该类以及内部的所以方法都必须在指定线程调用执行，包括构造方法。<br>比如MVP中view的接口方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface IBaseView &#123;</div><div class="line">    @UiThread</div><div class="line">    void showLoading();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>加载框必须要在UI线程调用</p>
<h3 id="参数为空性限制类"><a href="#参数为空性限制类" class="headerlink" title="参数为空性限制类"></a>参数为空性限制类</h3><p>这个就比较简单了，大家在实现Android的SDK方法的时候经常可以在重写系统方法的时候遇到</p>
<p>NonNull 标注在参数上时编译器会检查参数字段是否可能为空，标记在方法上时会检查返回的值是否为空。可能为空的情况编译器会提示你有一个潜在的崩溃危险</p>
<p>Nullable 标注在参数或有返回值的方法上，表明该参数或方法返回值可以为空</p>
<h3 id="类型限制类"><a href="#类型限制类" class="headerlink" title="类型限制类"></a>类型限制类</h3><p>限制参数的数据类型 </p>
<p>FloatRange 限定被注解对象必须为float或者double</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Retention(CLASS)</div><div class="line">@Target(&#123;METHOD,PARAMETER,FIELD,LOCAL_VARIABLE,ANNOTATION_TYPE&#125;)</div><div class="line">public @interface FloatRange &#123;</div><div class="line">    //起始值</div><div class="line">    double from() default Double.NEGATIVE_INFINITY;</div><div class="line">    //终点值</div><div class="line">    double to() default Double.POSITIVE_INFINITY;</div><div class="line"></div><div class="line">    //是否包含起始值</div><div class="line">    boolean fromInclusive() default true;</div><div class="line"></div><div class="line">    //是否包含终点值</div><div class="line">    boolean toInclusive() default true;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>IntRange 限定被注解对象必须为int或者long</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Retention(CLASS)</div><div class="line">@Target(&#123;METHOD,PARAMETER,FIELD,LOCAL_VARIABLE,ANNOTATION_TYPE&#125;)</div><div class="line">public @interface IntRange &#123;</div><div class="line">    //起始值，包含起始值</div><div class="line">    long from() default Long.MIN_VALUE;</div><div class="line">    //终点值，包含终点值</div><div class="line">    long to() default Long.MAX_VALUE;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="类型定义类"><a href="#类型定义类" class="headerlink" title="类型定义类"></a>类型定义类</h3><p>一般用于替代枚举，当我们定义API时，有时候需要传入本地定义好的一些值。为了使这些值具有可读性我们会选择用静态常量，有时候需要限制参数的可取集合。而这些值得类型可能是基础数据类型。为了避免调用API的人传入了其他的不可处理的非预期值进来，我们往往会选择用枚举。而枚举是比较耗费性能的。这个时候我们就可以用注解来替代<br>比如我们有一个图片上传的API。上传类型需要选择jpg还是png，枚举的方式就是比较简单了。直接定义一个图片类型枚举</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public enum  ImgType &#123;</div><div class="line">    jpg,png;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>API</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void  uploadImg(ImgType type) &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>你现在我们用注解的方式来实现这个需求<br>我们先定义两个int常量，放入一个常量类Data里</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public class   Data &#123;</div><div class="line">   public static final int JPG=1000;</div><div class="line">   public static final int PNG=1001;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们定义一个ImgType注解</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@IntDef(&#123;Data.JPG,Data.PNG&#125;)</div><div class="line">@Retention(RetentionPolicy.SOURCE)</div><div class="line">public @interface ImgType &#123;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们就定义了一个编译时检查的注解，我们把这个注解打在上传图片的API的类型参数上<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void  uploadImg(@ImgType int type) &#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样当我们调用API时，一旦我们传入的参数不是Data.JPG或者Data.PNG，编译器就会报错无法通过编译</p>
<p>StringDef用法类似</p>
<h3 id="其他功能类"><a href="#其他功能类" class="headerlink" title="其他功能类"></a>其他功能类</h3><p>CallSuper 如果你的API允许使用者重写你的方法，但是你又需要你自己的方法(父方法)在重写的时候也被调用，这时候你可以使用@CallSuper注解</p>
<p>CheckResult 如果你的方法返回一个值，你期望调用者用这个值做些事情，那么你可以使用@CheckResult注解标注这个方法，一般用于那些返回值被使用才有意义的API</p>
<p>ColorInt 当你期望传递的是一个真实的RGB或者ARGB的颜色值而不是颜色资源ID的时候可以使用该注解来提示API调用者</p>
<p>Dimension 标注的对象或者方法必须提供一个int的值，就是Android的屏幕上描述距离的一种单位</p>
<p>Keep 启用混淆的时候告诉编译器被注解的对象不要混淆</p>
<p>Px 标注的对象或者方法必须提供一个int的值，pixel</p>
<p>RequiresApi 当你提供的API是基于某个SDK版本开发的，要求调用者必须处理好低SDK版本兼容操作的时候，或者告诉调用者你的API只能在某个版本的SDK之后才可以正常的工作</p>
<p>RequiresPermission 告诉调用你API的人你的API需要特定的权限<br>如果你至少需要权限集合中的一个，你可以使用anyOf属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequiresPermission(anyOf = &#123;</div><div class="line">    Manifest.permission.INTERNET,</div><div class="line">    Manifest.permission.READ_PHONE_STATE&#125;)</div><div class="line">public abstract string getSaveUser();</div></pre></td></tr></table></figure></p>
<p>如果你同时需要多个权限，你可以用allOf属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@RequiresPermission(allOf = &#123;</div><div class="line">    Manifest.permission.READ_PHONE_STATE,</div><div class="line">    Manifest.permission.READ_PHONE_STATE&#125;)</div><div class="line">public abstract string getSaveUser();</div></pre></td></tr></table></figure></p>
<p>RestrictTo 注解的对象只接受一个特定范围的值，值范围是一个枚举</p>
<p>Size 限制一个列表集合的大小<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Retention(CLASS)</div><div class="line">@Target(&#123;PARAMETER,LOCAL_VARIABLE,METHOD,FIELD,ANNOTATION_TYPE&#125;)</div><div class="line">public @interface Size &#123;</div><div class="line">    //该注解必须要给一个值，默认-1</div><div class="line">    long value() default -1;</div><div class="line">    //最小的大小</div><div class="line">    long min() default Long.MIN_VALUE;</div><div class="line">   // 最大的大小</div><div class="line">    long max() default Long.MAX_VALUE;</div><div class="line">    //大小必须为这个值的倍数，默认为1</div><div class="line">    long multiple() default 1;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>VisibleForTesting 这个注解作用的对象测试的时候可以直接调用</p>
<p>以上就是Support Annotations提供的注解的用法了，由于篇幅问题，下一篇我们在聊怎么定义以及代码解析运行时注解</p>
<p>有什么建议的可以留言喔</p>
<p>如果我的博客对您有帮助，请留言鼓励下或者点个赞吧！</p>
<p>我建了一个QQ群（群号：121606151），用于大家讨论交流Android技术问题，有兴趣的可以加下，大家一起进步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尊重他人的劳动成果，转载请标明出处：&lt;a href=&quot;http://blog.csdn.net/gengqiquan/article/details/70185731，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/gengqiquan/article/details/70185731，&lt;/a&gt; 本文出自:【gengqiquan的博客】&lt;/p&gt;
&lt;p&gt;上篇博客嘀咕了注解的基本知识。这篇和大家唠唠Android提供的一些编译限制注解以及怎么自定义贴合自己项目框架的限制注解&lt;/p&gt;
&lt;p&gt;Android支持Java默认的那些注解，同时通过一些依赖库也额外提供了很多注解，了解并熟练使用这些注解能够让你的代码更加严谨，结构更加清晰、架构更易维护&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>告别onActivityResult ，用代理实现Rx方式获取startActivityForResult结果</title>
    <link href="http://www.gengqiquan.com/2017/07/11/%E5%91%8A%E5%88%ABonActivityResult-%EF%BC%8C%E7%94%A8%E4%BB%A3%E7%90%86%E5%AE%9E%E7%8E%B0Rx%E6%96%B9%E5%BC%8F%E8%8E%B7%E5%8F%96startActivityForResult%E7%BB%93%E6%9E%9C/"/>
    <id>http://www.gengqiquan.com/2017/07/11/告别onActivityResult-，用代理实现Rx方式获取startActivityForResult结果/</id>
    <published>2017-07-11T10:04:19.000Z</published>
    <updated>2017-07-11T10:05:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>尊重他人的劳动成果，转载请标明出处：<a href="http://blog.csdn.net/gengqiquan/article/details/74331845，" target="_blank" rel="external">http://blog.csdn.net/gengqiquan/article/details/74331845，</a> 本文出自:【gengqiquan的博客】<br>一个多月没写博客了，实在是最近事情特别多。<br>昨天，在review 公司项目代码的时候发现onActivityResult方法真的好烦，太影响代码的阅读了，而且编写的时候也需要到处切code位置。于是就有了这篇博客和<a href="https://github.com/gengqiquan/RxActivityResult" target="_blank" rel="external">RxActivityResult</a> 这个库。</p>
<a id="more"></a>
<p>大概的调用方式就是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">RxActivityResult.with(MainActivity.this).putString(&quot;key&quot;, &quot;笑一个&quot;)</div><div class="line">                      .startActivityWithResult(new Intent(MainActivity.this, SecondActivity.class))</div><div class="line">                      .subscribe(new Consumer&lt;Intent&gt;() &#123;</div><div class="line">                          @Override</div><div class="line">                          public void accept(Intent intent) throws Exception &#123;</div><div class="line">                              tv.setText(intent.getStringExtra(&quot;msg&quot;));</div><div class="line">                          &#125;</div><div class="line">                      &#125;);</div></pre></td></tr></table></figure>
<p>源码大家直接到链接看好了，这篇博客主要是聊聊思路</p>
<p>要想完全告别onActivityResult（），有两种方案<br>1、使用进程注入的方式hook系统的activity数据发送，这种方案比较复杂，用到ndk知识，需要在源码下编译应用，不适合大部分人。<br>2、利用代理进行跳转事件转发代理和 onActivityResult（）事件代理接收后再通知委托者。<br>这里我们用第二种，代理对象有两个供选择，一个是activity，每次startActivityForResult的时候打开的使我们的代理activity（ProxyActivity），然后由ProxyActivity进行转发intent，并在ProxyActivity里进行 onActivityResult（）事件处理，然后通知委托者；所以我们需要在manifest进行注册，并且需要合理的管理activity的堆栈。<br>一个是利用Fragment，这就需要将Fragment加载到activity上，否则发起intent的时候会报 not attach activity 异常，再一个就是需要兼容v4和app两种情况，当然，如果大家的项目里的基类是固定的一种就不需要了。</p>
<p>下面我们来看看具体实现方式<br>首先构建一个请求容器对象，用来存放被转发的intent和请求识别码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class Request  &#123;</div><div class="line">    Intent intent;</div><div class="line">    int code;</div><div class="line"></div><div class="line">    public Request(Intent intent, int code) &#123;</div><div class="line">        this.intent = intent;</div><div class="line">        this.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>再构建一个结果容器对象，用来存放onActivityResult返回的结果和请求识别码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class Result &#123;</div><div class="line">    Intent intent;</div><div class="line"></div><div class="line">    public Result(Intent intent, int code) &#123;</div><div class="line">        this.intent = intent;</div><div class="line">        this.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    int code;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们的返回结果是要以RxJava的方式传递给委托者的。这里我们可以参考rxbus的实现方式<br>构建一个subject</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static PublishSubject&lt;Result&gt; subject = PublishSubject.create();</div></pre></td></tr></table></figure>
<p>然后我们需要把Fragment加载到Activity上，这就需要有一个界面控件ID和一个FragmentManager，FragmentManager我们可以从委托者获取，根据activity和fragmentActivity的不同决定获取不同的FragmentManager，这个控件ID怎么来呢?熟悉Android源码的同学可能就知道了，每个界面的根布局其实都是同一个系统ID（android.R.id.content）这个ID其实可以用来做很多事，比如透明状态栏时软键盘不顶起布局的时候可以用来强制位移布局，或者自己做伪分屏。</p>
<p>接下来就是创建一个代理fragment并且把请求委托给它</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">final Request request = new Request(intent, intent.hashCode());</div><div class="line">    final V4Fragment v4Fragment = new V4Fragment();</div><div class="line">    v4Fragment.setRequest(request);</div><div class="line">    v4Transaction.replace(android.R.id.content, v4Fragment)</div><div class="line">            .commitAllowingStateLoss();</div><div class="line">    v4Transaction = null;</div></pre></td></tr></table></figure>
<p>这里的请求识别码我们直接通过求intent的hash值来得到。</p>
<p>在代理fragment里进行转发intent和转发返回结果操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class V4Fragment extends Fragment &#123;</div><div class="line">    @Override</div><div class="line">    public void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">        if (resultCode == Activity.RESULT_OK) &#123;</div><div class="line">            if (request != null) &#123;</div><div class="line">                RxActivityResult.post(new Result(data, request.code));</div><div class="line">            &#125;</div><div class="line">            request = null;</div><div class="line">            this.getActivity().getSupportFragmentManager().beginTransaction().detach(this).commit();</div><div class="line">        &#125;</div><div class="line">        super.onActivityResult(requestCode, resultCode, data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Request request;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        super.onAttach(activity);</div><div class="line">        if (request != null) &#123;</div><div class="line">            Intent intent = request.intent;</div><div class="line">            startActivityForResult(intent, 0);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRequest(Request request) &#123;</div><div class="line">        this.request = request;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过subject进行发送<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">protected static void post(Result result) &#123;</div><div class="line"></div><div class="line">      if (result.intent != null) &#123;</div><div class="line">          subject.onNext(result);</div><div class="line">      &#125; else &#123;</div><div class="line">          subject.onError(new Exception(&quot;intent is null&quot;));</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>根据请求识别码进行筛选</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">return subject.filter(new Predicate&lt;Result&gt;() &#123;</div><div class="line">                @Override</div><div class="line">                public boolean test(Result result) throws Exception &#123;</div><div class="line">                    return request.code == result.code;</div><div class="line">                &#125;</div><div class="line">            &#125;).map(new Function&lt;Result, Intent&gt;() &#123;</div><div class="line">                @Override</div><div class="line">                public Intent apply(Result result) throws Exception &#123;</div><div class="line">                    return result.intent;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<p>这样就得到了委托者所需要的返回结果了。</p>
<p>完整的示例代码、源码及gradle依赖方式请看<a href="https://github.com/gengqiquan/RxActivityResult" target="_blank" rel="external">https://github.com/gengqiquan/RxActivityResult</a> </p>
<p>有什么建议的可以留言喔</p>
<p>如果我的博客对您有帮助，请留言鼓励下或者点个赞吧！</p>
<p>我建了一个QQ群（群号：121606151），用于大家讨论交流Android技术问题，有兴趣的可以加下，大家一起进步。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;尊重他人的劳动成果，转载请标明出处：&lt;a href=&quot;http://blog.csdn.net/gengqiquan/article/details/74331845，&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.csdn.net/gengqiquan/article/details/74331845，&lt;/a&gt; 本文出自:【gengqiquan的博客】&lt;br&gt;一个多月没写博客了，实在是最近事情特别多。&lt;br&gt;昨天，在review 公司项目代码的时候发现onActivityResult方法真的好烦，太影响代码的阅读了，而且编写的时候也需要到处切code位置。于是就有了这篇博客和&lt;a href=&quot;https://github.com/gengqiquan/RxActivityResult&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RxActivityResult&lt;/a&gt; 这个库。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
